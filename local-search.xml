<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Golang使用ldflags传参</title>
    <link href="/posts/189a171e.html"/>
    <url>/posts/189a171e.html</url>
    
    <content type="html"><![CDATA[<h2 id="golang使用ldflags传参"><a class="markdownIt-Anchor" href="#golang使用ldflags传参"></a> <code>Golang</code>使用<code>ldflags</code>传参</h2><blockquote><p>go mod模式下</p></blockquote><ol><li>假设工程目录如下, <code>go mod</code>名称为<code>github.com/fnoopv/traffice</code></li></ol><pre><code class="hljs bash">taffic  cmd    root.go    version.go  main.go  go.mod  go.sum</code></pre><ol start="2"><li>向<code>main.go</code>中传参的方式</li></ol><pre><code class="hljs bash">go build -ldflags <span class="hljs-string">&quot;-X main.Version=0.0.1 -X &#x27;main.GitVersion=`git version`&#x27;&quot;</span></code></pre><ol start="3"><li>向子包中的变量传参，比如<code>cmd/version.go</code>，传参方式为</li></ol><pre><code class="hljs bash">go build -ldflags <span class="hljs-string">&quot;-X &#x27;github.com/fnoopv/traffice/cmd/version.Version=0.0.1&#x27; -X &#x27;github.com/fnoopv/traffice/version.GitVersion=`git version`&#x27;&quot;</span></code></pre><p>即为 <code>-X '&#123;go mod名称&#125;/文件路径/文件名称(不带.go后缀).&#123;变量名&#125;</code></p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Github Action部署Hexo</title>
    <link href="/posts/8f077907.html"/>
    <url>/posts/8f077907.html</url>
    
    <content type="html"><![CDATA[<h2 id="使用github-action自动化部署hexo博客"><a class="markdownIt-Anchor" href="#使用github-action自动化部署hexo博客"></a> 使用<code>Github Action</code>自动化部署Hexo博客</h2><h3 id="什么是cicd"><a class="markdownIt-Anchor" href="#什么是cicd"></a> 什么是<code>CI/CD</code></h3><p><code>CI/CD</code>:<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="CI/CD 维基百科">[1]</span></a></sup><br />CI(Continuous integration,持续集成)<br />CD(Continuous delivery,持续部署)</p><h3 id="为什么要用cicd工具"><a class="markdownIt-Anchor" href="#为什么要用cicd工具"></a> 为什么要用<code>CI/CD</code>工具</h3><p><code>Hexo</code>的使用方式决定了代码是放在本地的，放在远程公开仓库不安全。同时放在远程私有仓库需要同时做两步操作</p><ol><li><code>hexo d -g</code>推送网站内容到<code>网站仓库</code></li><li><code>git push origin master</code>把源数据推送到自己的<code>源数据仓库</code></li></ol><p>这种行为总是显得繁琐。所以就需要使用<code>CI/CD</code>工具进行自动化部署，免去<code>hexo -d g</code>的步骤，只需要推送源数据<br />到远程仓库，<code>CI/CD</code>工具会自动帮我们完成网站内容生成及部署两步，省心省时。</p><h3 id="什么是github-action"><a class="markdownIt-Anchor" href="#什么是github-action"></a> 什么是<code>Github Action</code></h3><p><code>Github Action</code><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Github Action官方文档">[2]</span></a></sup>是<code>Github</code>推出的<code>CI/CD</code>工具，类似于<code>jekenis</code>以及<code>Travis CI</code>，可以进行自动化部署。<br />不同的是<code>Github Actions</code>可以引用别人编写好的脚本，同时官方提供了<a href="https://github.com/marketplace?type=actions"><code>Actions</code>市场</a>,<br />可以供大家寻找自己可以利用的<code>actions</code>脚本。</p><h3 id="为什么要用github-action"><a class="markdownIt-Anchor" href="#为什么要用github-action"></a> 为什么要用<code>Github Action</code></h3><ol><li><code>Github Actions</code>是<code>Github</code>推出的一款<code>CI/CD</code>工具，由于本人的博客托管在<code>Github</code>，就选择了<code>Github Actions</code>。</li><li><code>Github Actions</code>上有现成的<code>hexo</code>部署脚本，可以直接引用和参考。(最重要的一点)</li></ol><h3 id="如何使用github-action"><a class="markdownIt-Anchor" href="#如何使用github-action"></a> 如何使用<code>Github Action</code></h3><p>前提条件是拥有两个仓库:</p><ol><li><code>public</code>状态的博客仓库，即名称为<code>username.github.io</code>的仓库</li><li><code>private</code>状态的存放博客源数据的仓库，比如<code>blogcode</code></li></ol><p>部署过程：</p><ol><li>生成新的密钥对</li></ol><pre><code class="hljs bash">ssh-keygen -t rsa -f ~/.ssh/id_rsa_x -C <span class="hljs-string">&quot;your email&quot;</span></code></pre><blockquote><p><code>your email</code>为你的<code>Github</code>邮箱</p></blockquote><p>命令会生成密钥对，即私钥<code>id_rsa_x</code>及公钥<code>id_rsa_x.pub</code>,存放在用户目录下的<code>.ssh</code>文件夹中</p><ol start="2"><li>添加密钥</li></ol><p>在<code>blogcode</code>仓库的<code>Settings</code>-&gt;<code>Secrets</code>中新建一个条目，名称为<code>DEPLOY_KEY</code>(必须为这个名称，其他任何名称都不生效),内容为<code>id_rsa_x</code>私钥的内容，可以使用<code>cat ~/.ssh/id_rsa_x</code>查看<br /><img src="https://pic.fnoop.com/img/20200630003622.png?imageslim" alt="Secrets" /></p><blockquote><p>私钥应该以 -----BEGIN OPENSSH PRIVATE KEY----- 开头<br />以 -----END OPENSSH PRIVATE KEY----- 结尾</p></blockquote><p>在<code>username.github.com</code>仓库中的<code>Settings</code>-&gt;<code>Deploy keys</code>中新建一个条目，名称任意，内容为<code>id_rsa_x.pub</code>公钥的内容，可以使用<code>cat ~/.ssh/id_rsa_x.pub</code>查看<br /><img src="https://pic.fnoop.com/img/20200630004346.png?imageslim" alt="Deploy keys" /></p><blockquote><p>公钥应该以<code>ssh-rsa</code>,|<code>ssh-ed25519</code>|<code>ecdsa-sha2-nistp256</code>|<code>ecdsa-sha2-nistp384</code>|<code>ecdsa-sha2-nistp521</code>开头</p></blockquote><p>在本地的<code>hexo</code>代码仓库中新建目录<code>.github</code>,再在<code>.github</code>中新建<code>workflows</code>目录，在<code>workflow</code>目录中新建一个<code>yml</code>文件，名字任意</p><p><img src="https://pic.fnoop.com/img/20200630004933.png?imageslim" alt="workflow" /></p><p>打开推荐的<a href="https://github.com/marketplace/actions/hexo-action#example-workflow---hexo-deploy">Hexo Action</a><sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo Action文档">[3]</span></a></sup>,复制<code>Example workflow</code>中的代码到新建的<code>yml</code>文件中<br /><img src="https://pic.fnoop.com/img/20200630005342.png?imageslim" alt="workflow code" /></p><p>设置<code>yml</code>文件中的代码为自己<code>Github</code>的用户名及邮箱<br /><img src="https://pic.fnoop.com/img/20200630005632.png?imageslim" alt="set yml" /></p><p>保存，新建一个文章并推送至<code>blogcode</code>仓库，在仓库的<code>Action</code>页面可以看到进度<br /><img src="https://pic.fnoop.com/img/20200630005938.png?imageslim" alt="action" /></p><p>完工。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://en.wikipedia.org/wiki/CI/CD"><code>CI/CD</code> 维基百科</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://help.github.com/en/actions"><code>Github Action</code>官方文档</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://github.com/marketplace/actions/hexo-action"><code>Hexo Action</code>文档</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>Github Action</tag>
      
      <tag>CI/CD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TLS最佳实践</title>
    <link href="/posts/c651f6d6.html"/>
    <url>/posts/c651f6d6.html</url>
    
    <content type="html"><![CDATA[<h2 id="服务器最佳tls配置"><a class="markdownIt-Anchor" href="#服务器最佳tls配置"></a> 服务器最佳TLS配置</h2><hr /><blockquote><p>需要相对应的OpenSSL版本支持</p></blockquote><p>mozilla组织提供了一个可以生成最佳安全配置的网站，<a href="https://ssl-config.mozilla.org/">ssl-config</a>，看图<br /><img src="https://pic.fnoop.com/img/20200629002725.png?imageslim" alt="ssl-config" /></p><h3 id="优势"><a class="markdownIt-Anchor" href="#优势"></a> 优势</h3><ul><li><p><code>齐全</code> 支持的软件数量高达<code>19</code>款，涵盖了大部分主流的软件</p></li><li><p><code>丰富</code> 提供的安全配置建议分为了三个级别，分别是<code>Modern</code>、<code>Intermediate</code>、<code>Old</code> 三种 ,三种的含义分别如下</p><ol><li><code>Moden</code>: 最激进的配置，安全性最高，只使用目前最新的安全方案，舍弃其他所有的方案，比如在Web中不支持<code>TLS1.1</code>及<code>TLS1.2</code></li><li><code>Intermediate</code>: 主流配置，是兼容性即安全性兼得的一种配置方案</li><li><code>Old</code>: 过时的配置，通常安全性较低，不建议使用</li></ol></li><li><p><code>简单</code> 只需要点击下鼠标，即可获取相对应的安全设置建议</p></li><li><p><code>精准</code> 可以输入软件版本及<code>Openssl</code>版本进行精准匹配，不会出现配置无法使用的情况</p></li><li><p><code>提供额外的选项</code> 可以选择是否应用<code>HSTS</code>及<code>OCSP Stapling</code></p></li></ul><p><img src="https://pic.fnoop.com/img/20200629003945.png?imageslim" alt="content" /></p><blockquote><p><code>HSTS</code>的作用是强制客户端使用HTTPS与服务端连接<br /><code>OCSP Stapling</code>的作用是server端把自己的站点证书和中间证书以及根证书打包一起下发到客户端，省去客户端查询的过程</p></blockquote><h3 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3><p>选择<code>Server Software</code>，及需要的安全配置级别，输入软件版本和<code>openssl</code>版本即可</p><blockquote><p><code>HSTS</code>功能和<code>OCSP Stapling</code>功能取决如软件是否支持</p></blockquote><h3 id="详细安全支持信息"><a class="markdownIt-Anchor" href="#详细安全支持信息"></a> 详细安全支持信息</h3><p>三种配置建议的差异、支持等可以看<a href="https://wiki.mozilla.org/Security/Server_Side_TLS">wiki</a>，wiki中详细说明了<code>TLS1.3</code>、<code>TLS1.2</code>支持的密码套件以及<code>Modern</code>、<code>Intermediate</code>、<code>Old</code>三种配置建议中支持的密码套件。</p>]]></content>
    
    
    <categories>
      
      <category>安全</category>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TLS</tag>
      
      <tag>SSL</tag>
      
      <tag>Linux</tag>
      
      <tag>Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
